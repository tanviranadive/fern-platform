# GraphQL schema for Fern Platform
# Enhanced with UI-specific queries and types for optimal performance

scalar Time
scalar JSON

# Test Run Types
type TestRun {
  id: ID!
  projectId: String!
  runId: String!
  branch: String
  commitSha: String
  status: String!
  startTime: Time!
  endTime: Time
  totalTests: Int!
  passedTests: Int!
  failedTests: Int!
  skippedTests: Int!
  duration: Int! # Duration in milliseconds
  environment: String
  metadata: JSON
  tags: [Tag!]!
  suiteRuns: [SuiteRun!]!
  createdAt: Time!
  updatedAt: Time!
}

type SuiteRun {
  id: ID!
  testRunId: ID!
  suiteName: String!
  status: String!
  startTime: Time!
  endTime: Time
  totalSpecs: Int!
  passedSpecs: Int!
  failedSpecs: Int!
  skippedSpecs: Int!
  duration: Int! # Duration in milliseconds
  tags: [Tag!]!
  specRuns: [SpecRun!]!
  createdAt: Time!
  updatedAt: Time!
}

type SpecRun {
  id: ID!
  suiteRunId: ID!
  specName: String!
  status: String!
  startTime: Time!
  endTime: Time
  duration: Int! # Duration in milliseconds
  errorMessage: String
  stackTrace: String
  retryCount: Int!
  isFlaky: Boolean!
  tags: [Tag!]!
  createdAt: Time!
  updatedAt: Time!
}

# Project Types
type Project {
  id: ID!
  projectId: String!
  name: String!
  description: String
  repository: String
  defaultBranch: String!
  settings: JSON
  isActive: Boolean!
  team: String
  canManage: Boolean!
  stats: ProjectStats
  createdAt: Time!
  updatedAt: Time!
}

type ProjectStats {
  totalTestRuns: Int!
  recentTestRuns: Int!
  uniqueBranches: Int!
  successRate: Float!
  averageDuration: Int!
  lastRunTime: Time
}

# Tag Types
type Tag {
  id: ID!
  name: String!
  category: String
  value: String
  description: String
  color: String
  usageCount: Int
  createdAt: Time!
  updatedAt: Time!
}

type TagUsage {
  id: ID!
  name: String!
  description: String
  color: String
  usageCount: Int!
}

# Flaky Test Types
type FlakyTest {
  id: ID!
  projectId: String!
  testName: String!
  suiteName: String
  flakeRate: Float!
  totalExecutions: Int!
  flakyExecutions: Int!
  lastSeenAt: Time!
  firstSeenAt: Time!
  status: String!
  severity: String!
  lastErrorMessage: String
  createdAt: Time!
  updatedAt: Time!
}

# Statistics Types
type TestRunStats {
  totalRuns: Int!
  statusCounts: [StatusCount!]!
  averageDuration: Int!
  successRate: Float!
}

type StatusCount {
  status: String!
  count: Int!
}

type FlakyTestStats {
  totalFlakyTests: Int!
  severityCounts: [SeverityCount!]!
  averageFlakeRate: Float!
  mostFlakyTest: FlakyTest
}

type SeverityCount {
  severity: String!
  count: Int!
}

# Connection Types for Pagination
type TestRunConnection {
  edges: [TestRunEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestRunEdge {
  node: TestRun!
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type TagConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

type FlakyTestConnection {
  edges: [FlakyTestEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FlakyTestEdge {
  node: FlakyTest!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Input Types
input TestRunFilter {
  projectId: String
  branch: String
  status: String
  environment: String
  startTime: Time
  endTime: Time
  tags: [String!]
}

input ProjectFilter {
  search: String
  activeOnly: Boolean
}

input TagFilter {
  search: String
}

input FlakyTestFilter {
  projectId: String
  severity: String
  status: String
  minFlakeRate: Float
  maxFlakeRate: Float
}

input CreateTestRunInput {
  projectId: String!
  runId: String!
  branch: String
  commitSha: String
  environment: String
  metadata: JSON
  tags: [String!]
}

input CreateProjectInput {
  projectId: String!
  name: String!
  description: String
  repository: String
  defaultBranch: String
  settings: JSON
  team: String
}

input UpdateProjectInput {
  name: String
  description: String
  repository: String
  defaultBranch: String
  settings: JSON
  team: String
}

input CreateTagInput {
  name: String!
  description: String
  color: String
}

input UpdateTagInput {
  name: String
  description: String
  color: String
}

input UpdateUserPreferencesInput {
  theme: String
  timezone: String
  language: String
  favorites: [String!]
  preferences: JSON
}

# User and Authentication Types
type User {
  id: ID!
  userId: String!
  email: String!
  name: String!
  firstName: String
  lastName: String
  role: String!
  profileUrl: String
  groups: [String!]!
  createdAt: Time!
  lastLoginAt: Time
}

# User Preferences Type
type UserPreferences {
  id: ID!
  userId: String!
  theme: String
  timezone: String
  language: String
  favorites: [String!]!
  preferences: JSON
  createdAt: Time!
  updatedAt: Time!
}

# System Configuration Type
type SystemConfig {
  roleGroups: RoleGroupConfig!
}

type RoleGroupConfig {
  adminGroup: String!
  managerGroup: String!
  userGroup: String!
}

# JIRA Integration Types
type JiraConnection {
  id: ID!
  projectId: String!
  name: String!
  jiraUrl: String!
  authenticationType: String!
  projectKey: String!
  username: String!
  status: String!
  isActive: Boolean!
  lastTestedAt: Time
  createdAt: Time!
  updatedAt: Time!
}

input CreateJiraConnectionInput {
  projectId: String!
  name: String!
  jiraUrl: String!
  authenticationType: String!
  projectKey: String!
  username: String!
  credential: String!
}

input UpdateJiraConnectionInput {
  name: String!
  jiraUrl: String!
  projectKey: String!
}

input UpdateJiraCredentialsInput {
  authenticationType: String!
  username: String!
  credential: String!
}

# Health Status Type
type HealthStatus {
  status: String!
  service: String!
  timestamp: Time!
  version: String
}

# Dashboard Summary Types
type DashboardSummary {
  health: HealthStatus!
  projectCount: Int!
  activeProjectCount: Int!
  totalTestRuns: Int!
  recentTestRuns: Int!
  overallPassRate: Float!
  totalTestsExecuted: Int!
  averageTestDuration: Int!
}

# Treemap Visualization Types
type TreemapData {
  projects: [ProjectTreemapNode!]!
  totalDuration: Int!
  totalTests: Int!
  overallPassRate: Float!
}

type ProjectTreemapNode {
  project: Project!
  suites: [SuiteTreemapNode!]!
  totalDuration: Int!
  totalTests: Int!
  passedTests: Int!
  failedTests: Int!
  passRate: Float!
  totalRuns: Int!
}

type SuiteTreemapNode {
  suite: SuiteRun!
  specs: [SpecTreemapNode!]!
  totalDuration: Int!
  totalSpecs: Int!
  passedSpecs: Int!
  failedSpecs: Int!
  passRate: Float!
}

type SpecTreemapNode {
  spec: SpecRun!
  duration: Int!
  status: String!
  isFlaky: Boolean!
}

# Query Root
type Query {
  # User/Auth
  currentUser: User
  userPreferences: UserPreferences
  systemConfig: SystemConfig!
  
  # Dashboard
  dashboardSummary: DashboardSummary!
  health: HealthStatus!
  
  # Treemap Visualization
  treemapData(projectId: String, days: Int = 7): TreemapData!
  # Test Runs
  testRun(id: ID!): TestRun
  testRunByRunId(runId: String!): TestRun
  testRuns(
    filter: TestRunFilter
    first: Int = 20
    after: String
    orderBy: String = "createdAt"
    orderDirection: OrderDirection = DESC
  ): TestRunConnection!
  testRunStats(projectId: String, days: Int = 30): TestRunStats!
  recentTestRuns(projectId: String, limit: Int = 10): [TestRun!]!

  # Projects
  project(id: ID!): Project
  projectByProjectId(projectId: String!): Project
  projects(
    filter: ProjectFilter
    first: Int = 20
    after: String
  ): ProjectConnection!

  # Tags
  tag(id: ID!): Tag
  tagByName(name: String!): Tag
  tags(
    filter: TagFilter
    first: Int = 20
    after: String
  ): TagConnection!
  tagUsageStats: [TagUsage!]!
  popularTags(limit: Int = 10): [TagUsage!]!

  # Flaky Tests
  flakyTest(id: ID!): FlakyTest
  flakyTests(
    filter: FlakyTestFilter
    first: Int = 20
    after: String
    orderBy: String = "flakeRate"
    orderDirection: OrderDirection = DESC
  ): FlakyTestConnection!
  flakyTestStats(projectId: String): FlakyTestStats!
  recentlyAddedFlakyTests(projectId: String, days: Int = 7, limit: Int = 10): [FlakyTest!]!
  
  # JIRA Connections
  jiraConnection(id: ID!): JiraConnection
  jiraConnections(projectId: String!): [JiraConnection!]!
}

# Mutation Root
type Mutation {
  # Test Runs
  createTestRun(input: CreateTestRunInput!): TestRun!
  updateTestRunStatus(runId: String!, status: String!, endTime: Time): TestRun!
  deleteTestRun(id: ID!): Boolean!
  assignTagsToTestRun(testRunId: ID!, tagIds: [ID!]!): TestRun!

  # Projects
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): Boolean!
  activateProject(projectId: String!): Project!
  deactivateProject(projectId: String!): Project!

  # Tags
  createTag(input: CreateTagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Boolean!

  # Flaky Tests
  markFlakyTestResolved(id: ID!): FlakyTest!
  markSpecAsFlaky(specRunId: ID!): SpecRun!
  
  # User Preferences
  updateUserPreferences(input: UpdateUserPreferencesInput!): UserPreferences!
  toggleProjectFavorite(projectId: String!): UserPreferences!
  
  # JIRA Connections
  createJiraConnection(input: CreateJiraConnectionInput!): JiraConnection!
  updateJiraConnection(id: ID!, input: UpdateJiraConnectionInput!): JiraConnection!
  updateJiraCredentials(id: ID!, input: UpdateJiraCredentialsInput!): JiraConnection!
  testJiraConnection(id: ID!): Boolean!
  deleteJiraConnection(id: ID!): Boolean!
}

# Subscription Root (for future real-time features)
type Subscription {
  # Real-time test run updates
  testRunCreated(projectId: String): TestRun!
  testRunUpdated(projectId: String): TestRun!
  testRunStatusChanged(projectId: String): TestRun!
  
  # Real-time flaky test notifications
  flakyTestDetected(projectId: String): FlakyTest!
}

enum OrderDirection {
  ASC
  DESC
}