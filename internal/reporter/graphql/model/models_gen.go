// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateJiraConnectionInput struct {
	ProjectID          string `json:"projectId"`
	Name               string `json:"name"`
	JiraURL            string `json:"jiraUrl"`
	AuthenticationType string `json:"authenticationType"`
	ProjectKey         string `json:"projectKey"`
	Username           string `json:"username"`
	Credential         string `json:"credential"`
}

type CreateProjectInput struct {
	ProjectID     string         `json:"projectId"`
	Name          string         `json:"name"`
	Description   *string        `json:"description,omitempty"`
	Repository    *string        `json:"repository,omitempty"`
	DefaultBranch *string        `json:"defaultBranch,omitempty"`
	Settings      map[string]any `json:"settings,omitempty"`
	Team          *string        `json:"team,omitempty"`
}

type CreateTagInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Color       *string `json:"color,omitempty"`
}

type CreateTestRunInput struct {
	ProjectID   string         `json:"projectId"`
	RunID       string         `json:"runId"`
	Branch      *string        `json:"branch,omitempty"`
	CommitSha   *string        `json:"commitSha,omitempty"`
	Environment *string        `json:"environment,omitempty"`
	Metadata    map[string]any `json:"metadata,omitempty"`
	Tags        []string       `json:"tags,omitempty"`
}

type DashboardSummary struct {
	Health              *HealthStatus `json:"health"`
	ProjectCount        int           `json:"projectCount"`
	ActiveProjectCount  int           `json:"activeProjectCount"`
	TotalTestRuns       int           `json:"totalTestRuns"`
	RecentTestRuns      int           `json:"recentTestRuns"`
	OverallPassRate     float64       `json:"overallPassRate"`
	TotalTestsExecuted  int           `json:"totalTestsExecuted"`
	AverageTestDuration int           `json:"averageTestDuration"`
}

type FlakyTest struct {
	ID               string    `json:"id"`
	ProjectID        string    `json:"projectId"`
	TestName         string    `json:"testName"`
	SuiteName        *string   `json:"suiteName,omitempty"`
	FlakeRate        float64   `json:"flakeRate"`
	TotalExecutions  int       `json:"totalExecutions"`
	FlakyExecutions  int       `json:"flakyExecutions"`
	LastSeenAt       time.Time `json:"lastSeenAt"`
	FirstSeenAt      time.Time `json:"firstSeenAt"`
	Status           string    `json:"status"`
	Severity         string    `json:"severity"`
	LastErrorMessage *string   `json:"lastErrorMessage,omitempty"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

type FlakyTestConnection struct {
	Edges      []*FlakyTestEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type FlakyTestEdge struct {
	Node   *FlakyTest `json:"node"`
	Cursor string     `json:"cursor"`
}

type FlakyTestFilter struct {
	ProjectID    *string  `json:"projectId,omitempty"`
	Severity     *string  `json:"severity,omitempty"`
	Status       *string  `json:"status,omitempty"`
	MinFlakeRate *float64 `json:"minFlakeRate,omitempty"`
	MaxFlakeRate *float64 `json:"maxFlakeRate,omitempty"`
}

type FlakyTestStats struct {
	TotalFlakyTests  int              `json:"totalFlakyTests"`
	SeverityCounts   []*SeverityCount `json:"severityCounts"`
	AverageFlakeRate float64          `json:"averageFlakeRate"`
	MostFlakyTest    *FlakyTest       `json:"mostFlakyTest,omitempty"`
}

type HealthStatus struct {
	Status    string    `json:"status"`
	Service   string    `json:"service"`
	Timestamp time.Time `json:"timestamp"`
	Version   *string   `json:"version,omitempty"`
}

type JiraConnection struct {
	ID                 string     `json:"id"`
	ProjectID          string     `json:"projectId"`
	Name               string     `json:"name"`
	JiraURL            string     `json:"jiraUrl"`
	AuthenticationType string     `json:"authenticationType"`
	ProjectKey         string     `json:"projectKey"`
	Username           string     `json:"username"`
	Status             string     `json:"status"`
	IsActive           bool       `json:"isActive"`
	LastTestedAt       *time.Time `json:"lastTestedAt,omitempty"`
	CreatedAt          time.Time  `json:"createdAt"`
	UpdatedAt          time.Time  `json:"updatedAt"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Project struct {
	ID            string         `json:"id"`
	ProjectID     string         `json:"projectId"`
	Name          string         `json:"name"`
	Description   *string        `json:"description,omitempty"`
	Repository    *string        `json:"repository,omitempty"`
	DefaultBranch string         `json:"defaultBranch"`
	Settings      map[string]any `json:"settings,omitempty"`
	IsActive      bool           `json:"isActive"`
	Team          *string        `json:"team,omitempty"`
	CanManage     bool           `json:"canManage"`
	Stats         *ProjectStats  `json:"stats,omitempty"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
}

type ProjectConnection struct {
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type ProjectEdge struct {
	Node   *Project `json:"node"`
	Cursor string   `json:"cursor"`
}

type ProjectFilter struct {
	Search     *string `json:"search,omitempty"`
	ActiveOnly *bool   `json:"activeOnly,omitempty"`
}

type ProjectStats struct {
	TotalTestRuns   int        `json:"totalTestRuns"`
	RecentTestRuns  int        `json:"recentTestRuns"`
	UniqueBranches  int        `json:"uniqueBranches"`
	SuccessRate     float64    `json:"successRate"`
	AverageDuration int        `json:"averageDuration"`
	LastRunTime     *time.Time `json:"lastRunTime,omitempty"`
}

type ProjectTreemapNode struct {
	Project       *Project            `json:"project"`
	Suites        []*SuiteTreemapNode `json:"suites"`
	TotalDuration int                 `json:"totalDuration"`
	TotalTests    int                 `json:"totalTests"`
	PassedTests   int                 `json:"passedTests"`
	FailedTests   int                 `json:"failedTests"`
	PassRate      float64             `json:"passRate"`
	TotalRuns     int                 `json:"totalRuns"`
}

type Query struct {
}

type RoleGroupConfig struct {
	AdminGroup   string `json:"adminGroup"`
	ManagerGroup string `json:"managerGroup"`
	UserGroup    string `json:"userGroup"`
}

type SeverityCount struct {
	Severity string `json:"severity"`
	Count    int    `json:"count"`
}

type SpecRun struct {
	ID           string     `json:"id"`
	SuiteRunID   string     `json:"suiteRunId"`
	SpecName     string     `json:"specName"`
	Status       string     `json:"status"`
	StartTime    time.Time  `json:"startTime"`
	EndTime      *time.Time `json:"endTime,omitempty"`
	Duration     int        `json:"duration"`
	ErrorMessage *string    `json:"errorMessage,omitempty"`
	StackTrace   *string    `json:"stackTrace,omitempty"`
	RetryCount   int        `json:"retryCount"`
	IsFlaky      bool       `json:"isFlaky"`
	Tags         []*Tag     `json:"tags"`
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    time.Time  `json:"updatedAt"`
}

type SpecTreemapNode struct {
	Spec     *SpecRun `json:"spec"`
	Duration int      `json:"duration"`
	Status   string   `json:"status"`
	IsFlaky  bool     `json:"isFlaky"`
}

type StatusCount struct {
	Status string `json:"status"`
	Count  int    `json:"count"`
}

type Subscription struct {
}

type SuiteRun struct {
	ID           string     `json:"id"`
	TestRunID    string     `json:"testRunId"`
	SuiteName    string     `json:"suiteName"`
	Status       string     `json:"status"`
	StartTime    time.Time  `json:"startTime"`
	EndTime      *time.Time `json:"endTime,omitempty"`
	TotalSpecs   int        `json:"totalSpecs"`
	PassedSpecs  int        `json:"passedSpecs"`
	FailedSpecs  int        `json:"failedSpecs"`
	SkippedSpecs int        `json:"skippedSpecs"`
	Duration     int        `json:"duration"`
	Tags         []*Tag     `json:"tags"`
	SpecRuns     []*SpecRun `json:"specRuns"`
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    time.Time  `json:"updatedAt"`
}

type SuiteTreemapNode struct {
	Suite         *SuiteRun          `json:"suite"`
	Specs         []*SpecTreemapNode `json:"specs"`
	TotalDuration int                `json:"totalDuration"`
	TotalSpecs    int                `json:"totalSpecs"`
	PassedSpecs   int                `json:"passedSpecs"`
	FailedSpecs   int                `json:"failedSpecs"`
	PassRate      float64            `json:"passRate"`
}

type SystemConfig struct {
	RoleGroups *RoleGroupConfig `json:"roleGroups"`
}

type Tag struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Category    *string   `json:"category,omitempty"`
	Value       *string   `json:"value,omitempty"`
	Description *string   `json:"description,omitempty"`
	Color       *string   `json:"color,omitempty"`
	UsageCount  *int      `json:"usageCount,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type TagEdge struct {
	Node   *Tag   `json:"node"`
	Cursor string `json:"cursor"`
}

type TagFilter struct {
	Search *string `json:"search,omitempty"`
}

type TagUsage struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Color       *string `json:"color,omitempty"`
	UsageCount  int     `json:"usageCount"`
}

type TestRun struct {
	ID           string         `json:"id"`
	ProjectID    string         `json:"projectId"`
	RunID        string         `json:"runId"`
	Branch       *string        `json:"branch,omitempty"`
	CommitSha    *string        `json:"commitSha,omitempty"`
	Status       string         `json:"status"`
	StartTime    time.Time      `json:"startTime"`
	EndTime      *time.Time     `json:"endTime,omitempty"`
	TotalTests   int            `json:"totalTests"`
	PassedTests  int            `json:"passedTests"`
	FailedTests  int            `json:"failedTests"`
	SkippedTests int            `json:"skippedTests"`
	Duration     int            `json:"duration"`
	Environment  *string        `json:"environment,omitempty"`
	Metadata     map[string]any `json:"metadata,omitempty"`
	Tags         []*Tag         `json:"tags"`
	SuiteRuns    []*SuiteRun    `json:"suiteRuns"`
	CreatedAt    time.Time      `json:"createdAt"`
	UpdatedAt    time.Time      `json:"updatedAt"`
}

type TestRunConnection struct {
	Edges      []*TestRunEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type TestRunEdge struct {
	Node   *TestRun `json:"node"`
	Cursor string   `json:"cursor"`
}

type TestRunFilter struct {
	ProjectID   *string    `json:"projectId,omitempty"`
	Branch      *string    `json:"branch,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Environment *string    `json:"environment,omitempty"`
	StartTime   *time.Time `json:"startTime,omitempty"`
	EndTime     *time.Time `json:"endTime,omitempty"`
	Tags        []string   `json:"tags,omitempty"`
}

type TestRunStats struct {
	TotalRuns       int            `json:"totalRuns"`
	StatusCounts    []*StatusCount `json:"statusCounts"`
	AverageDuration int            `json:"averageDuration"`
	SuccessRate     float64        `json:"successRate"`
}

type TreemapData struct {
	Projects        []*ProjectTreemapNode `json:"projects"`
	TotalDuration   int                   `json:"totalDuration"`
	TotalTests      int                   `json:"totalTests"`
	OverallPassRate float64               `json:"overallPassRate"`
}

type UpdateJiraConnectionInput struct {
	Name       string `json:"name"`
	JiraURL    string `json:"jiraUrl"`
	ProjectKey string `json:"projectKey"`
}

type UpdateJiraCredentialsInput struct {
	AuthenticationType string `json:"authenticationType"`
	Username           string `json:"username"`
	Credential         string `json:"credential"`
}

type UpdateProjectInput struct {
	Name          *string        `json:"name,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Repository    *string        `json:"repository,omitempty"`
	DefaultBranch *string        `json:"defaultBranch,omitempty"`
	Settings      map[string]any `json:"settings,omitempty"`
	Team          *string        `json:"team,omitempty"`
}

type UpdateTagInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Color       *string `json:"color,omitempty"`
}

type UpdateUserPreferencesInput struct {
	Theme       *string        `json:"theme,omitempty"`
	Timezone    *string        `json:"timezone,omitempty"`
	Language    *string        `json:"language,omitempty"`
	Favorites   []string       `json:"favorites,omitempty"`
	Preferences map[string]any `json:"preferences,omitempty"`
}

type User struct {
	ID          string     `json:"id"`
	UserID      string     `json:"userId"`
	Email       string     `json:"email"`
	Name        string     `json:"name"`
	FirstName   *string    `json:"firstName,omitempty"`
	LastName    *string    `json:"lastName,omitempty"`
	Role        string     `json:"role"`
	ProfileURL  *string    `json:"profileUrl,omitempty"`
	Groups      []string   `json:"groups"`
	CreatedAt   time.Time  `json:"createdAt"`
	LastLoginAt *time.Time `json:"lastLoginAt,omitempty"`
}

type UserPreferences struct {
	ID          string         `json:"id"`
	UserID      string         `json:"userId"`
	Theme       *string        `json:"theme,omitempty"`
	Timezone    *string        `json:"timezone,omitempty"`
	Language    *string        `json:"language,omitempty"`
	Favorites   []string       `json:"favorites"`
	Preferences map[string]any `json:"preferences,omitempty"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
